import{_ as s,c as i,o as a,U as t}from"./chunks/framework.zPv4qwin.js";const g=JSON.parse('{"title":"Cytoscape","description":"Basic graph visualization using Cytoscpae","frontmatter":{"title":"Cytoscape","editLink":true,"description":"Basic graph visualization using Cytoscpae"},"headers":[],"relativePath":"graphviz/cytoscape/index.md","filePath":"graphviz/cytoscape/index.md"}'),e={name:"graphviz/cytoscape/index.md"},n=t(`<h1 id="cytoscape" tabindex="-1">Cytoscape <a class="header-anchor" href="#cytoscape" aria-label="Permalink to &quot;Cytoscape&quot;">​</a></h1><p>The open source <a href="https://js.cytoscape.org/" target="_blank" rel="noreferrer">Cytoscape.js library</a> is a powerful graph visualization library that allows you to create interactive and customizable network graphs.</p><p><strong>Pro:</strong></p><ul><li>it provides a wide range of features and options for creating and manipulating graphs, including layout algorithms, styling options, and event handling</li><li>you can easily visualize complex data structures and relationships in a visually appealing and intuitive way</li><li>large community and lots of plugins</li><li>stable and mature</li><li>open source (MIT license).</li></ul><p><strong>Con:</strong></p><ul><li>limited set of layout algorithms</li><li>not geared toward some type of diagrams (UML, database schema, swimlanes, Sankey...)</li><li>does not support WebGL</li><li>limited styling options</li><li>not enterprise support.</li></ul><div class="info custom-block"><p class="custom-block-title">Qwiery</p><p>Qwiery has a client branch using Cytoscape for graph visualization. It fully supports all sorts of graph visualization scenario&#39;s but if you wish to have an enterprise-level app you should consider <a href="/graphviz/ogma/">Ogma</a> or <a href="/graphviz/yfiles/">yFiles</a></p></div><h1 id="elements" tabindex="-1">Elements <a class="header-anchor" href="#elements" aria-label="Permalink to &quot;Elements&quot;">​</a></h1><p>Cytoscape has an unusual &#39;graph&#39; data structure. Instead of nodes and edges in an object, a Cytoscape graph is an array with the <code>group</code> property differentiation between nodes and eddges:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> graph</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ group: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nodes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data: { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, position: { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ group: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nodes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data: { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, position: { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ group: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;edges&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data: { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;edge1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, source: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, target: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><p>This is often referred to in the documentation as &#39;elements&#39; or &#39;eles&#39;.</p><div class="warning custom-block"><p class="custom-block-title">Beware</p><p>The <code>id</code> is not in the root of the payload, but in the data block. Same for the <code>source</code> and <code>target</code>. On the other hand, the <code>position</code> does sit in the root.</p></div><p>Loading this into Cytoscape is like so:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cytoscape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  container: document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ elements: graph });</span></span></code></pre></div><p>There is a utility class called <code>CytoUtils</code> which can help you with the conversion of Qwiery nodes, edges and graphs to Cytoscape elements.</p><h1 id="elements-vs-instances" tabindex="-1">Elements vs. instances <a class="header-anchor" href="#elements-vs-instances" aria-label="Permalink to &quot;Elements vs. instances&quot;">​</a></h1><p>The Cytoscape data elements are serialized instances but the API can be misleading. For instance, a node element is:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nodes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } }</span></span></code></pre></div><p>To access the <code>id</code> you use <code>node.id()</code> but to access the <code>position</code> you use <code>node.position()</code>. This is because the <code>id</code> is a property of the <code>data</code> object but the <code>position</code> is a property of the node itself. This is a bit confusing and you need to be aware of this.</p>`,19),h=[n];function l(p,o,d,k,r,c){return a(),i("div",null,h)}const y=s(e,[["render",l]]);export{g as __pageData,y as default};
