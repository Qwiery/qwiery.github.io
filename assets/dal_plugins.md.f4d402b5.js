import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.b67c47e6.js";const u=JSON.parse('{"title":"Plugins","description":"","frontmatter":{},"headers":[],"relativePath":"dal/plugins.md","filePath":"dal/plugins.md"}'),e={name:"dal/plugins.md"},l=p(`<h1 id="plugins" tabindex="-1">Plugins <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;Plugins&quot;">​</a></h1><p>Plugins extend the core API and the storage pipeline. A plugin affecting the storage logic is called an adapter and is a special type of plugin.</p><p>The <a href="https://qwiery.github.io/plugins/Semantic/" target="_blank" rel="noreferrer">Semantic</a> plugin, for example, does not change the storage logic but does extend the API. You enable it like this</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Semantic</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;qwiery-semantic&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Qwiery</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;qwiery&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Qwiery.</span><span style="color:#B392F0;">plugin</span><span style="color:#E1E4E8;">(Semantic);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">q</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Qwiery</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Semantic</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;qwiery-semantic&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Qwiery</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;qwiery&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Qwiery.</span><span style="color:#6F42C1;">plugin</span><span style="color:#24292E;">(Semantic);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">q</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Qwiery</span><span style="color:#24292E;">();</span></span></code></pre></div><p>and from here on you have a semantic (aka RDF or triple-store) methods, for instance <code>createTriple</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> q.</span><span style="color:#B392F0;">createTriple</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;subject&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;predicate&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;object&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> q.</span><span style="color:#6F42C1;">createTriple</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;subject&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;predicate&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;object&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>This plugin uses the internal storage API and can further downstream be pushed via an adapter in a backend database (OpenCypher, SQL, whatnot).</p><p>An adapter can be registered with the <code>plugin</code> method or via the <code>adapter</code> method. It does not extend the API but will transfer the data in such a way that it &#39;fits&#39; the underlying storage.</p><p>The <a href="https://qwiery.github.io/adapters/SQL/" target="_blank" rel="noreferrer">SQL Adapter</a> for example will transparently convert graphs into something fitting a relational database. Note that not every features is necessarily supported by every adapter. The SQL adapter is the common denominator and, for instance, if you want to use <a href="https://learn.microsoft.com/en-us/sql/relational-databases/graphs/sql-graph-overview?view=sql-server-ver16" target="_blank" rel="noreferrer">the graph specific functionality in MS SQL</a> you will need to write a forked version.</p><h2 id="creating-your-own-plugin" tabindex="-1">Creating your own plugin <a class="header-anchor" href="#creating-your-own-plugin" aria-label="Permalink to &quot;Creating your own plugin&quot;">​</a></h2><p>A plugin is, of course, in essence nothing but a mix-in. The following will, hence, work without any issues:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">PeoplePlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getPerson</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">personId</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            id: personId</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">    }   </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">Qwiery.</span><span style="color:#B392F0;">plugin</span><span style="color:#E1E4E8;">(PeoplePlugin);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">PeoplePlugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getPerson</span><span style="color:#24292E;">(</span><span style="color:#E36209;">personId</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            id: personId</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">    }   </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">Qwiery.</span><span style="color:#6F42C1;">plugin</span><span style="color:#24292E;">(PeoplePlugin);</span></span></code></pre></div><p>This does not integrate really with Qwiery, so if you want to access the storage methods you need to go a step further. Define a module which exports a function with a parameter</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">People</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getPerson</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">personId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getNode</span><span style="color:#E1E4E8;">({id: personId})</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">Q</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">peopleApi</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        getPerson: </span><span style="color:#79B8FF;">People</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.getPerson</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Q</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">plugin</span><span style="color:#E1E4E8;">(peopleApi);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">People</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getPerson</span><span style="color:#24292E;">(</span><span style="color:#E36209;">personId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getNode</span><span style="color:#24292E;">({id: personId})</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">Q</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">peopleApi</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        getPerson: </span><span style="color:#005CC5;">People</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.getPerson</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Q</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">plugin</span><span style="color:#24292E;">(peopleApi);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>Note that the <code>getNode</code> method is part of the Qwiery storage API. The way the <code>getPerson</code> is fetched is really dependent on the registered adapters. A plugin can in fact act both on the API and on the storage level. The <a href="https://qwiery.github.io/plugins/Schema/" target="_blank" rel="noreferrer">Schema</a> plugin is an example of this.</p><p>Plugins and adapters are really complementary in the sense that plugins extend the API while adapters change the existing API. It is tempting to write a plugin which tries to change the behavior of, say, <code>createNode</code> but this will not work as expected. If you want to change the logic of a method like <code>createNode</code> you need to use an adapter rather than a plugin. At the same time, if you want to add a method to the API and consume the core API this will be fine. You can also combine both in one go, the <a href="https://qwiery.github.io/plugins/Schema/" target="_blank" rel="noreferrer">Schema</a> plugin does this, as can be seen in the following:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">Q</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// the adapter guards the incoming data</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Q</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">adapter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;schema&quot;</span><span style="color:#E1E4E8;">, SchemaAdapter);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// the api adds schema methods to Qwiery</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Q</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">plugin</span><span style="color:#E1E4E8;">(SchemaApi);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">Q</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// the adapter guards the incoming data</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Q</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">adapter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;schema&quot;</span><span style="color:#24292E;">, SchemaAdapter);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// the api adds schema methods to Qwiery</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Q</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">plugin</span><span style="color:#24292E;">(SchemaApi);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div>`,17),o=[l];function t(r,c,i,y,E,d){return a(),n("div",null,o)}const g=s(e,[["render",t]]);export{u as __pageData,g as default};
