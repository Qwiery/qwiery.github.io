import{_ as e,c as a,o as t,V as r}from"./chunks/framework.Ca-bdDpS.js";const f=JSON.parse('{"title":"Graph View API","description":"","frontmatter":{},"headers":[],"relativePath":"graphviz/graphView.md","filePath":"graphviz/graphView.md"}'),o={name:"graphviz/graphView.md"},i=r('<h1 id="graph-view-api" tabindex="-1">Graph View API <a class="header-anchor" href="#graph-view-api" aria-label="Permalink to &quot;Graph View API&quot;">​</a></h1><p>This interface is implemented by the various graph visualization wrappers. It&#39;s the common denominator and in most cases sufficient for standard graph apps. Of course, each package has its own scope and if you wish to fully exploit one you will need to go beyond this interface.</p><p>For example, the yFiles package has a wealth of graph layout algorithms far beyond what Cytoscape has to offer. This interface allows you go run some of the yFiles layouts with appropriate defaults but you should see this only as a jump-start.</p><hr><p>General principle:</p><ul><li>the actual implementation uses underneath different types of node or edge structure</li><li>nodes/edges go in and out as plain objects, DO NOT return vendor specific objects</li><li>a nodes/edges have an id</li><li>in addition, an edge has sourceId/targetId</li><li>all the rest is optional (labels, name, position...)</li></ul><hr><h2 id="addnode" tabindex="-1">addNode <a class="header-anchor" href="#addnode" aria-label="Permalink to &quot;addNode&quot;">​</a></h2><p>Adds a new node to the graph.</p><p>Type: function (n: IQwieryNode): string</p><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>n</code> {IEntityNode} The raw data defining the node.</li></ul><p>Returns <strong>string</strong> The id of the node.</p><h2 id="addedge" tabindex="-1">addEdge <a class="header-anchor" href="#addedge" aria-label="Permalink to &quot;addEdge&quot;">​</a></h2><p>Adds a new edge to the graph.</p><p>Type: function (edge: IQwieryEdge): string</p><h3 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>edge</code> {IEntityEdge} The raw data defining the edge.</li></ul><p>Returns <strong>string</strong> The id of the edge.</p><h2 id="loadgraph" tabindex="-1">loadGraph <a class="header-anchor" href="#loadgraph" aria-label="Permalink to &quot;loadGraph&quot;">​</a></h2><p>Load the given graph in the viewer.</p><p>Type: function (g: (GraphLike | any), replace: boolean): void</p><h3 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>g</code> {GraphLike} A (JSON) graph.</li><li><code>replace</code> {boolean} Whether it should replace the current view or increment it.</li></ul><h2 id="clear" tabindex="-1">clear <a class="header-anchor" href="#clear" aria-label="Permalink to &quot;clear&quot;">​</a></h2><p>Clear the view (remove all nodes and edges).</p><p>Type: function (): void</p><h2 id="setstyle" tabindex="-1">setStyle <a class="header-anchor" href="#setstyle" aria-label="Permalink to &quot;setStyle&quot;">​</a></h2><p>Apply the given style.</p><p>Type: function (styleName: string): void</p><h3 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>styleName</code> {string} The style name.</li></ul><h2 id="layout" tabindex="-1">layout <a class="header-anchor" href="#layout" aria-label="Permalink to &quot;layout&quot;">​</a></h2><p>Apply the layout with the name and options.</p><p>Type: function (layoutName: string, options: any): void</p><h3 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>layoutName</code> {string} The name of the layout.</li><li><code>options</code> {any} Options specific to the layout.</li></ul><h2 id="center" tabindex="-1">center <a class="header-anchor" href="#center" aria-label="Permalink to &quot;center&quot;">​</a></h2><p>Pan the graph to the centre of a collection.</p><p>Type: function (fit: boolean): void</p><h3 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>fit</code> {boolean} Resize to fit the canvas.</li></ul><h2 id="fit" tabindex="-1">fit <a class="header-anchor" href="#fit" aria-label="Permalink to &quot;fit&quot;">​</a></h2><p>Fit the graph in the canvas.</p><p>Type: function (padding: number): void</p><h3 id="parameters-6" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-6" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>padding</code> {number} The margin around the graph (in pixels).</li></ul><h2 id="zoom" tabindex="-1">zoom <a class="header-anchor" href="#zoom" aria-label="Permalink to &quot;zoom&quot;">​</a></h2><p>Zoom into the diagram.</p><p>Type: function (amount: number): number</p><h3 id="parameters-7" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-7" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>amount</code> {number} A value &gt;1 magnifies while ≤1 zooms out. If nothing is given the current value is returned.</li></ul><h2 id="removenode" tabindex="-1">removeNode <a class="header-anchor" href="#removenode" aria-label="Permalink to &quot;removeNode&quot;">​</a></h2><p>Removes the node with the given id.</p><p>Type: function (id: (string | any)): void</p><h3 id="parameters-8" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-8" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>id</code> {string|any} A node or the id of a node.</li></ul><h2 id="getnodes" tabindex="-1">getNodes <a class="header-anchor" href="#getnodes" aria-label="Permalink to &quot;getNodes&quot;">​</a></h2><p>Returns the nodes of the graph or the ones satisfying the given predicate.</p><p>Type: function (filter: Function): Array&lt;any&gt;&gt;</p><h3 id="parameters-9" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-9" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>filter</code> {Function} Optional node predicate.</li></ul><h2 id="removeisolatednodes" tabindex="-1">removeIsolatedNodes <a class="header-anchor" href="#removeisolatednodes" aria-label="Permalink to &quot;removeIsolatedNodes&quot;">​</a></h2><p>Removes the nodes with degree zero.</p><p>Type: function (): void</p><h2 id="edgecreation" tabindex="-1">edgeCreation <a class="header-anchor" href="#edgecreation" aria-label="Permalink to &quot;edgeCreation&quot;">​</a></h2><p>Enables or disables the interactive edge creation.</p><p>Type: function (enabled: boolean): void</p><h3 id="parameters-10" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-10" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>enabled</code> {boolean} Whether it should be enabled.</li></ul><h2 id="nodecreation" tabindex="-1">nodeCreation <a class="header-anchor" href="#nodecreation" aria-label="Permalink to &quot;nodeCreation&quot;">​</a></h2><p>Enables or disables the interactive node creation.</p><p>Type: function (enabled: boolean): void</p><h3 id="parameters-11" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-11" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>enabled</code> {boolean} Whether it should be enabled.</li></ul><h2 id="centernode" tabindex="-1">centerNode <a class="header-anchor" href="#centernode" aria-label="Permalink to &quot;centerNode&quot;">​</a></h2><p>Centers the given node.</p><p>Type: function (node: any): void</p><h3 id="parameters-12" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-12" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>node</code> {any} A node.</li></ul><h2 id="selectednodes" tabindex="-1">selectedNodes <a class="header-anchor" href="#selectednodes" aria-label="Permalink to &quot;selectedNodes&quot;">​</a></h2><p>Returns the selected nodes.</p><p>Type: function (): Array&lt;any&gt;&gt;</p><h2 id="getposition" tabindex="-1">getPosition <a class="header-anchor" href="#getposition" aria-label="Permalink to &quot;getPosition&quot;">​</a></h2><p>Returns the position of the pointer on canvas.</p><p>Type: function (): {x:number, y:number}</p><h2 id="removeselection" tabindex="-1">removeSelection <a class="header-anchor" href="#removeselection" aria-label="Permalink to &quot;removeSelection&quot;">​</a></h2><p>Removes whatever is selected.</p><p>Type: function (): void</p><h2 id="getnode" tabindex="-1">getNode <a class="header-anchor" href="#getnode" aria-label="Permalink to &quot;getNode&quot;">​</a></h2><p>returns the node with the specified id.</p><p>Type: function (id: string): any</p><h3 id="parameters-13" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-13" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>id</code> {string} An identifier.</li></ul><h2 id="setnodeproperties" tabindex="-1">setNodeProperties <a class="header-anchor" href="#setnodeproperties" aria-label="Permalink to &quot;setNodeProperties&quot;">​</a></h2><p>Sets multiple properties in one go.</p>',96),n=[i];function d(l,s,h,p,c,u){return t(),a("div",null,n)}const b=e(o,[["render",d]]);export{f as __pageData,b as default};
