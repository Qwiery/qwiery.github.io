import{_ as s,c as a,o as e,d as n}from"./app.849f28db.js";const u=JSON.parse('{"title":"Graphs","description":"","frontmatter":{},"headers":[],"relativePath":"guide/graphs.md"}'),o={name:"guide/graphs.md"},p=n(`<h1 id="graphs" tabindex="-1">Graphs <a class="header-anchor" href="#graphs" aria-hidden="true">#</a></h1><p>Qwiery has a graph package with various algorithms and structures to make it easy to create graphs and analyze them.</p><p>There are several (easy) ways to create a graph, for example via an edge array:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// tapole graph</span></span>
<span class="line"><span style="color:#A6ACCD;">Graph</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fromEdgeArray</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1-&gt;2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2-&gt;2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"></span></code></pre></div><p>which is equivalent to:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Graph</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fromArrows</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1-&gt;2-&gt;2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>These simple formats allow you to create unlabelled graphs</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Graph</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fromArrows</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1-&gt;2-&gt;2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2-&gt;3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"></span></code></pre></div><p>but it does not allow to add a payload to the nodes or edges. For this purpose you need the pseudo-cypher format:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Graph</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fromPseudoCypher</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(u:Person{name:&#39;Anna&#39;})-[r:Knows]-&gt;(v{id:33})</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>This will pick up the labels and the payload of nodes and edges. This is not a full Cypher implementation in the sense that traversals and querying are not parsed. The format is meant to be used for data creation, not for data extraction.</p>`,11),t=[p];function l(r,c,i,d,y,h){return e(),a("div",null,t)}const C=s(o,[["render",l]]);export{u as __pageData,C as default};
