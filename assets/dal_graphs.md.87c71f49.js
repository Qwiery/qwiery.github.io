import{_ as s,o as a,c as o,Q as e}from"./chunks/framework.b67c47e6.js";const u=JSON.parse('{"title":"Graphs","description":"","frontmatter":{},"headers":[],"relativePath":"dal/graphs.md","filePath":"dal/graphs.md"}'),p={name:"dal/graphs.md"},n=e(`<h1 id="graphs" tabindex="-1">Graphs <a class="header-anchor" href="#graphs" aria-label="Permalink to &quot;Graphs&quot;">​</a></h1><p>Qwiery has a graph package with various algorithms and structures to make it easy to create graphs and analyze them.</p><p>There are several (easy) ways to create a graph, for example via an edge array:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// tapole graph</span></span>
<span class="line"><span style="color:#E1E4E8;">Graph.</span><span style="color:#B392F0;">fromEdgeArray</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;1-&gt;2&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;2-&gt;2&quot;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// tapole graph</span></span>
<span class="line"><span style="color:#24292E;">Graph.</span><span style="color:#6F42C1;">fromEdgeArray</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;1-&gt;2&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;2-&gt;2&quot;</span><span style="color:#24292E;">])</span></span></code></pre></div><p>which is equivalent to:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Graph.</span><span style="color:#B392F0;">fromArrows</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;1-&gt;2-&gt;2&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Graph.</span><span style="color:#6F42C1;">fromArrows</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1-&gt;2-&gt;2&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>These simple formats allow you to create unlabelled graphs</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Graph.</span><span style="color:#B392F0;">fromArrows</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;1-&gt;2-&gt;2&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;2-&gt;3&quot;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Graph.</span><span style="color:#6F42C1;">fromArrows</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;1-&gt;2-&gt;2&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;2-&gt;3&quot;</span><span style="color:#24292E;">])</span></span></code></pre></div><p>but it does not allow to add a payload to the nodes or edges. For this purpose you need <strong>the pseudo-cypher format</strong>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Graph.</span><span style="color:#B392F0;">fromPseudoCypher</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;(u:Person{name:&#39;Anna&#39;})-[r:Knows]-&gt;(v{id:33})&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Graph.</span><span style="color:#6F42C1;">fromPseudoCypher</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;(u:Person{name:&#39;Anna&#39;})-[r:Knows]-&gt;(v{id:33})&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>This will pick up the labels and the payload of nodes and edges. This is not a full Cypher implementation in the sense that traversals and querying are not parsed. The format is meant to be used for data creation, not for data extraction.</p><h2 id="graph-generators" tabindex="-1">Graph generators <a class="header-anchor" href="#graph-generators" aria-label="Permalink to &quot;Graph generators&quot;">​</a></h2><p>There are lots of graph generators and predefined graphs to work with:</p><ul><li>the famous karate club</li><li>the Watts-Strogatz generator</li><li>the Erdos-Renyi generator</li></ul><p>and much more. Simply use</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Graph.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;small world&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">Graph.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;women&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">Graph.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;karate&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">Graph.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Erdos&quot;</span><span style="color:#E1E4E8;">, {nodeCount: </span><span style="color:#79B8FF;">120</span><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Graph.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;small world&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">Graph.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;women&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">Graph.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;karate&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">Graph.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Erdos&quot;</span><span style="color:#24292E;">, {nodeCount: </span><span style="color:#005CC5;">120</span><span style="color:#24292E;">})</span></span></code></pre></div><p>and more. There are diverse name variations for the graph or generator and each one has its own set of parameters.</p><h2 id="trees-and-forests" tabindex="-1">Trees and forests <a class="header-anchor" href="#trees-and-forests" aria-label="Permalink to &quot;Trees and forests&quot;">​</a></h2><p>A tree with a root</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">tree</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Tree</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">tree</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Tree</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>can be turned into a forest</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">forest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tree.</span><span style="color:#B392F0;">toForest</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">forest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tree.</span><span style="color:#6F42C1;">toForest</span><span style="color:#24292E;">();</span></span></code></pre></div><p>and you can add children with</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">tree.root.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;child&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">tree.root.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;child&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>You will also find depth-first and breadth-first algorithms to traverse the trees and forest.</p>`,25),l=[n];function t(r,c,i,d,y,E){return a(),o("div",null,l)}const g=s(p,[["render",t]]);export{u as __pageData,g as default};
