import{_ as a,o as e,c as s,R as i}from"./chunks/framework.X8BlTTRm.js";const u=JSON.parse('{"title":"Adapter Signature","description":"","frontmatter":{},"headers":[],"relativePath":"dal/adapter-methods.md","filePath":"dal/adapter-methods.md"}'),t={name:"dal/adapter-methods.md"},l=i(`<h1 id="adapter-signature" tabindex="-1">Adapter Signature <a class="header-anchor" href="#adapter-signature" aria-label="Permalink to &quot;Adapter Signature&quot;">​</a></h1><p>All <a href="/dal/adapters">adapters</a> implement the same interface and you can find below an overview of these methods.</p><p>A <strong>node</strong> is a flat key-value dictionary (i.e. a JSON structure without sub-objects) with at least a unique identifier (a string).</p><p>For instance, this is a node</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a344&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Anna&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">56</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    labels: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Person&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>If you don&#39;t supply an <code>id</code> the adapter will auto-assign a UUID. If you given an id that is not a string, it will be stringified.</p><p>Some properties have special meaning although all depends on how the underlying store deals with it:</p><ul><li><code>labels</code>: one or more entity types or names. This can be seen as defining a schema or taxonomy of the data</li><li><code>x</code>,<code>y</code>: this often refers to positions when used in a visualization</li><li><code>name</code>: this property is used by default when searching for nodes.</li></ul><p>There are diverse methods and utilities in Qwiery to convert to and from such a node structure (<code>CytoUtils</code>, <code>OgmaUtils</code>, <code>yFilesUtils</code>...).</p><p>An <strong>edge</strong> is a key-value object with at least a unique identifier <code>id</code> as well as a <code>sourceId</code> and <code>targetId</code>.</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> edge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;edge1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sourceId: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8825b01e-5666-44a8-8c06-8ede29a7b8a3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    targetId: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;e3d8cecb-fc07-4143-981e-5e6839de96f8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    labels: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Knows&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;InheritsFrom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Not all adapters support multiple labels. For example, Neo4j refers to an edge label as <code>type</code> and you can have only one type on a relationship. The JSON adapter and the SQL adapter do, however, support multiple labels.</p><p>Visualization frameworks sometimes use <code>source</code> and <code>target</code> (or similar) to identify endpoints and Qwiery has utilities to deal with this. When creating nodes and edges, Qwiery tries hard to make sense of the given data.</p><h2 id="clear" tabindex="-1">clear <a class="header-anchor" href="#clear" aria-label="Permalink to &quot;clear&quot;">​</a></h2><p>Clears the graph.</p><p>Danger: it will remove all nodes and edges without confirmation request or warning.</p><h3 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> q</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Qwiery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>Does not return anything.</p><h2 id="loadgraph" tabindex="-1">loadGraph <a class="header-anchor" href="#loadgraph" aria-label="Permalink to &quot;loadGraph&quot;">​</a></h2><p>Loads a graph and completely replaces the current data.</p><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>name</code> {string} The name of the dataset. (optional, default <code>&quot;food&quot;</code>)</li></ul><p>Returns <strong>Promise&lt;void&gt;</strong></p><h2 id="getneighborhood" tabindex="-1">getNeighborhood <a class="header-anchor" href="#getneighborhood" aria-label="Permalink to &quot;getNeighborhood&quot;">​</a></h2><p>Returns the parents and children of the given node id as a graph.</p><h3 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>id</code> {string} A node id.</li><li><code>amount</code> {number} The maximum amount of nodes to return. (optional, default <code>10</code>)</li></ul><h3 id="examples-1" tabindex="-1">Examples <a class="header-anchor" href="#examples-1" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> q</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Qwiery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">randomGraph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// this returns the parents and children of node with id &quot;5&quot; together with the edges</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNeighborhood</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns **Promise Graph **</p><h2 id="randomgraph" tabindex="-1">randomGraph <a class="header-anchor" href="#randomgraph" aria-label="Permalink to &quot;randomGraph&quot;">​</a></h2><p>This method implements various graph generation algorithms like Erdos-Renyi, Watts-Strogatz and more. The parameters depend on the selected algorithm.</p><h3 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>name</code> {string} The name of the algorithm to use. (optional, default <code>&quot;Erdos&quot;</code>)</li><li><code>args</code> <strong>...any</strong> {*[]} Parameters specific to the algorithm.</li></ul><h3 id="examples-2" tabindex="-1">Examples <a class="header-anchor" href="#examples-2" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> q</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Qwiery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// use the Erdos-Renyi algorithm to generate 40 nodes and 50 edges</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">randomGraph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;erdos&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns <strong>Promise&lt;Graph&gt;</strong> The generated graph.</p><h2 id="inferschemagraph" tabindex="-1">inferSchemaGraph <a class="header-anchor" href="#inferschemagraph" aria-label="Permalink to &quot;inferSchemaGraph&quot;">​</a></h2><p>the name of the node and edges is the label (class).</p><ul><li>the schema is a graph</li><li>the schema is inferred from the data, there is strictly speaking no schema in the database constraining the data</li></ul><h3 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>cached</code> {boolean} If true the cached version will be used, otherwise the schema will be recomputed and cached. (optional, default <code>true</code>)</li></ul><p>Returns <strong>Promise&lt;Graph&gt;</strong></p><h2 id="pathquery" tabindex="-1">pathQuery <a class="header-anchor" href="#pathquery" aria-label="Permalink to &quot;pathQuery&quot;">​</a></h2><p>a path query is an array defining a path template</p><ul><li>the result is a graph in which every node is part of the full path</li><li>path queries allow you to fetch data without having to write queries</li><li>the asterisk defines a wildcard</li></ul><h3 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>path</code> {string[]}</li><li><code>amount</code> {number} The maximum amount of nodes to return. (optional, default <code>1000</code>)</li></ul><h3 id="examples-3" tabindex="-1">Examples <a class="header-anchor" href="#examples-3" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pathQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Knows&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pathQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Person&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Location&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pathQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Person&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Location&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hotel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>Returns <strong>Promise&lt;Graph&gt;</strong></p><h2 id="searchnodes" tabindex="-1">searchNodes <a class="header-anchor" href="#searchnodes" aria-label="Permalink to &quot;searchNodes&quot;">​</a></h2><p>Search of the nodes for the given term (in the specified fields).</p><h3 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>term</code> {string} A search term.</li><li><code>fields</code> {string[]} The properties to consider in the search. (optional, default <code>[]</code>)</li><li><code>amount</code> {number} The maximum amount of nodes to return. (optional, default <code>100</code>)</li></ul><h3 id="examples-4" tabindex="-1">Examples <a class="header-anchor" href="#examples-4" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">searchNodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ato&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>Returns <strong>Promise&lt;any&gt;</strong></p><h2 id="searchnodeswithlabel" tabindex="-1">searchNodesWithLabel <a class="header-anchor" href="#searchnodeswithlabel" aria-label="Permalink to &quot;searchNodesWithLabel&quot;">​</a></h2><p>Search of the nodes with specified labels for the given term.</p><h3 id="parameters-6" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-6" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>term</code> {string} A search term.</li><li><code>fields</code> {string[]} The properties to consider in the search. (optional, default <code>[]</code>)</li><li><code>label</code> {string|null} Only nodes having the specified label. (optional, default <code>null</code>)</li><li><code>amount</code> {number} Return at most the given amount. (optional, default <code>100</code>)</li></ul><h3 id="examples-5" tabindex="-1">Examples <a class="header-anchor" href="#examples-5" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">searchNodesWithLabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fos&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;firstName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Person&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="getnodes" tabindex="-1">getNodes <a class="header-anchor" href="#getnodes" aria-label="Permalink to &quot;getNodes&quot;">​</a></h2><ul><li><strong>See</strong>: <a href="https://www.mongodb.com/docs/manual/reference/operator/query/" target="_blank" rel="noreferrer">Mongo Projections</a></li></ul><p>Returns the nodes satisfying the given predicate.</p><h3 id="parameters-7" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-7" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>predicate</code> {function|*} A Mongo-like projection. If the adapter supports it, a function can be passed. (optional, default <code>{}</code>)</li><li><code>amount</code> {number} The maximum amount to return. (optional, default <code>1000</code>)</li></ul><h3 id="examples-6" tabindex="-1">Examples <a class="header-anchor" href="#examples-6" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> found</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({age:{$gt: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}})</span></span></code></pre></div><p>Returns <strong>Promise&lt;Array&lt;any&gt;&gt;</strong></p><h2 id="getnodeswithlabel" tabindex="-1">getNodesWithLabel <a class="header-anchor" href="#getnodeswithlabel" aria-label="Permalink to &quot;getNodesWithLabel&quot;">​</a></h2><p>Returns the nodes with the specified labels.</p><h3 id="parameters-8" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-8" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>label</code> {string} A label.</li><li><code>amount</code> {number} The maximum amount to return. (optional, default <code>1000</code>)</li></ul><h3 id="examples-7" tabindex="-1">Examples <a class="header-anchor" href="#examples-7" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> found</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNodesWithLabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Company&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Returns <strong>Promise&lt;Array&lt;any&gt;&gt;</strong></p><h2 id="getnode" tabindex="-1">getNode <a class="header-anchor" href="#getnode" aria-label="Permalink to &quot;getNode&quot;">​</a></h2><p>The specification can be</p><ul><li>a string representing the id of the node</li><li>a predicate (function) if the underlying adapter supports it. This works for the JSON store, for instance, but not for the Cypher adapter.</li><li>a Mongo projection (the adapter will convert this to a native query constraint).</li></ul><h3 id="parameters-9" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-9" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>id</code> {string|function|*} The node id or a Mongo-like projection. If the adapter supports it, a function can be passed.</li></ul><h3 id="examples-8" tabindex="-1">Examples <a class="header-anchor" href="#examples-8" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bc0d7ac6-9a9a-44de-98d9-af371337482a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// only if the adapter handles it	 *</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n.archived})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// always works</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({id: {$eq: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">132</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}})</span></span></code></pre></div><p>Returns <strong>Promise&lt;(any | null)&gt;</strong></p><h2 id="nodeexists" tabindex="-1">nodeExists <a class="header-anchor" href="#nodeexists" aria-label="Permalink to &quot;nodeExists&quot;">​</a></h2><p>Checks whether the node with the specified id exists.</p><h3 id="parameters-10" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-10" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>id</code> {string} Id of the node.</li></ul><p>Returns <strong>Promise&lt;boolean&gt;</strong></p><h2 id="nodecount" tabindex="-1">nodeCount <a class="header-anchor" href="#nodecount" aria-label="Permalink to &quot;nodeCount&quot;">​</a></h2><p>Return the amount of nodes with the specified predicate, if any given.</p><h3 id="parameters-11" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-11" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>predicate</code> {function} An optional predicate. (optional, default <code>null</code>)</li></ul><h3 id="examples-9" tabindex="-1">Examples <a class="header-anchor" href="#examples-9" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nodeCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({x:{$lt:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}})</span></span></code></pre></div><p>Returns <strong>Promise&lt;number&gt;</strong></p><h2 id="createnode" tabindex="-1">createNode <a class="header-anchor" href="#createnode" aria-label="Permalink to &quot;createNode&quot;">​</a></h2><p>Creates a new node.</p><h3 id="parameters-12" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-12" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>data</code> {*} The payload. (optional, default <code>null</code>)</li><li><code>id</code> {string|null} The unique id of the node. (optional, default <code>null</code>)</li><li><code>labels</code> {string[]} One or more labels. (optional, default <code>null</code>)</li></ul><h3 id="examples-10" tabindex="-1">Examples <a class="header-anchor" href="#examples-10" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// something like {&quot;id&quot;:&quot;f3b0db00-fee8-44f6-a3d3-50a3e0d3fe26&quot;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {id:&quot;a&quot;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1042</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {id:&quot;1042&quot;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Carl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {id:&quot;a5a278ef-7c59-4680-8e6b-cfe58ba6701a&quot;, name: &quot;Carl&quot;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Yan&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Person&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {id:&quot;a&quot;, name: &quot;Carl&quot;, labels:[&quot;Person&quot;]}</span></span></code></pre></div><p>Returns <strong>any</strong></p><h2 id="createnodes" tabindex="-1">createNodes <a class="header-anchor" href="#createnodes" aria-label="Permalink to &quot;createNodes&quot;">​</a></h2><ul><li><strong>See</strong>: <a href="#createnode">createNode</a></li></ul><p>Creates a sequence of nodes.</p><h3 id="parameters-13" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-13" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>seq</code> {string[]|*[]} A sequence of node id&#39;s or node specs.</li></ul><p>Returns <strong>Promise&lt;Array&lt;any&gt;&gt;</strong> The created nodes.</p><h2 id="deletenode" tabindex="-1">deleteNode <a class="header-anchor" href="#deletenode" aria-label="Permalink to &quot;deleteNode&quot;">​</a></h2><ul><li><strong>See</strong>: <a href="#deletenodes">deleteNodes</a></li></ul><p>Deletes the specified node.</p><p>Note: it&#39;s the adapter&#39;s responsibility to manage the integrity of the graph. This is automatic if you use Neo4j but not if you implement your own adapter. All the Qwiery adapters (JSON, SQL...) do ensure integrity.</p><h3 id="parameters-14" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-14" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>id</code> {string} The id of the node to delete.</li></ul><h3 id="examples-11" tabindex="-1">Examples <a class="header-anchor" href="#examples-11" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;5005b86d-e350-43b1-aa6e-fb910fa19174&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// void</span></span></code></pre></div><p>Returns <strong>Promise&lt;void&gt;</strong></p><h2 id="deletenodes" tabindex="-1">deleteNodes <a class="header-anchor" href="#deletenodes" aria-label="Permalink to &quot;deleteNodes&quot;">​</a></h2><ul><li><strong>See</strong>: <a href="#deletenode">deleteNode</a></li></ul><p>Flexible deletion of nodes via the given predicate.</p><h3 id="parameters-15" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-15" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>predicate</code> {function} A predicate function.</li></ul><h3 id="examples-12" tabindex="-1">Examples <a class="header-anchor" href="#examples-12" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteNodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({age:{$gt: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}});</span></span></code></pre></div><p>Returns <strong>Promise&lt;Array&lt;string&gt;&gt;</strong> Returns the deleted items.</p><h2 id="updatenode" tabindex="-1">updateNode <a class="header-anchor" href="#updatenode" aria-label="Permalink to &quot;updateNode&quot;">​</a></h2><p>Updates a node.</p><p>Note:</p><ul><li>this raises an error if the node does not exist. The <a href="#upsertnode">upsertNode</a> does not raise an error and will create the node instead</li><li>the given data has to specify an id or the second param (id) has to be given in order to update something</li><li>you cannot change the id via an update.</li></ul><h3 id="parameters-16" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-16" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>data</code> {*} The payload. (optional, default <code>null</code>)</li><li><code>id</code> {string|null} The id of the node to update or create. (optional, default <code>null</code>)</li><li><code>labels</code> {string[]} The labels of the node. (optional, default <code>null</code>)</li></ul><h3 id="examples-13" tabindex="-1">Examples <a class="header-anchor" href="#examples-13" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kris&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kris&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kris&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;B&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({id:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kris&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, labels:[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;B&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]})</span></span></code></pre></div><p>Returns <strong>any</strong></p><h2 id="upsertnode" tabindex="-1">upsertNode <a class="header-anchor" href="#upsertnode" aria-label="Permalink to &quot;upsertNode&quot;">​</a></h2><p>Upserts a node.</p><p>Note: same as <a href="#updatenode">updateNode</a> but does not raise an error if the node does not exist.</p><h3 id="parameters-17" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-17" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>data</code> {*} The payload. (optional, default <code>null</code>)</li><li><code>id</code> {string|null} The id of the node to update or create. (optional, default <code>null</code>)</li><li><code>labels</code> {string[]} The labels of the node. (optional, default <code>null</code>)</li></ul><p>Returns <strong>any</strong></p><h2 id="getnodelabels" tabindex="-1">getNodeLabels <a class="header-anchor" href="#getnodelabels" aria-label="Permalink to &quot;getNodeLabels&quot;">​</a></h2><p>Fetches all the labels across all nodes.</p><p>Returns <strong>Promise&lt;Array&lt;string&gt;&gt;</strong></p><h2 id="getnodelabelproperties" tabindex="-1">getNodeLabelProperties <a class="header-anchor" href="#getnodelabelproperties" aria-label="Permalink to &quot;getNodeLabelProperties&quot;">​</a></h2><p>Fetches all the properties of a given label.</p><p>Note: this is inferred from all the nodes with the specified label. The property is returned if at least one node with the given label has this property assigned.</p><h3 id="parameters-18" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-18" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>labelName</code></li></ul><p>Returns <strong>Promise&lt;Array&lt;string&gt;&gt;</strong></p><h2 id="edgeexists" tabindex="-1">edgeExists <a class="header-anchor" href="#edgeexists" aria-label="Permalink to &quot;edgeExists&quot;">​</a></h2><p>Checks whether the edge with the given id exists.</p><h3 id="parameters-19" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-19" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>id</code> {string} The edge id.</li></ul><p>Returns <strong>Promise&lt;boolean&gt;</strong></p><h2 id="edgecount" tabindex="-1">edgeCount <a class="header-anchor" href="#edgecount" aria-label="Permalink to &quot;edgeCount&quot;">​</a></h2><p>Returns the amount of edges, optionally filtered with the specified predicate.</p><h3 id="parameters-20" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-20" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>predicate</code> {function} An optional predicate. (optional, default <code>null</code>)</li></ul><p>Returns <strong>Promise&lt;number&gt;</strong></p><h2 id="createedge" tabindex="-1">createEdge <a class="header-anchor" href="#createedge" aria-label="Permalink to &quot;createEdge&quot;">​</a></h2><p>Creates an edge.</p><h3 id="parameters-21" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-21" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>sourceId</code> {string} The id of the source node.</li><li><code>targetId</code> {string|null} The id of the target node. (optional, default <code>null</code>)</li><li><code>data</code> {*} The payload. (optional, default <code>null</code>)</li><li><code>id</code> {string} The unique id of the edge. (optional, default <code>null</code>)</li><li><code>labels</code> {string[]} One or more labels. (optional, default <code>null</code>)</li></ul><p>Returns <strong>any</strong></p><h2 id="deleteedge" tabindex="-1">deleteEdge <a class="header-anchor" href="#deleteedge" aria-label="Permalink to &quot;deleteEdge&quot;">​</a></h2><p>Deletes the edge with the specified id.</p><h3 id="parameters-22" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-22" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>id</code> {string} The edge id.</li></ul><p>Returns <strong>Promise&lt;void&gt;</strong></p><h2 id="updateedge" tabindex="-1">updateEdge <a class="header-anchor" href="#updateedge" aria-label="Permalink to &quot;updateEdge&quot;">​</a></h2><p>Updates an edge.</p><h3 id="parameters-23" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-23" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>data</code> {*} The payload.</li><li><code>id</code> {string|null} The edge id. (optional, default <code>null</code>)</li><li><code>labels</code> The labels on the edge. (optional, default <code>null</code>)</li></ul><p>Returns <strong>any</strong></p><h2 id="upsertedge" tabindex="-1">upsertEdge <a class="header-anchor" href="#upsertedge" aria-label="Permalink to &quot;upsertEdge&quot;">​</a></h2><p>Upserts an edge.</p><h3 id="parameters-24" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-24" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>data</code> {*} The payload.</li><li><code>id</code> {string|null} The edge id. (optional, default <code>null</code>)</li><li><code>labels</code> The labels on the edge. (optional, default <code>null</code>)</li></ul><p>Returns <strong>any</strong></p><h2 id="getedge" tabindex="-1">getEdge <a class="header-anchor" href="#getedge" aria-label="Permalink to &quot;getEdge&quot;">​</a></h2><p>Returns the edge with the specified id.</p><h3 id="parameters-25" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-25" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>id</code> {string|function|*} The node id or a Mongo-like projection. If the adapter supports it, a function can be passed.</li></ul><p>Returns <strong>any</strong></p><h2 id="getedgesbetween" tabindex="-1">getEdgesBetween <a class="header-anchor" href="#getedgesbetween" aria-label="Permalink to &quot;getEdgesBetween&quot;">​</a></h2><p>Returns the edges between the specified endpoints.</p><h3 id="parameters-26" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-26" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>sourceId</code> {string} The source id.</li><li><code>targetId</code> {string} The target id.</li><li><code>amount</code> {number} The maximum amount to return. (optional, default <code>10</code>)</li></ul><p>Returns <strong>Promise&lt;Array&lt;any&gt;&gt;</strong></p><h2 id="getedgebetween" tabindex="-1">getEdgeBetween <a class="header-anchor" href="#getedgebetween" aria-label="Permalink to &quot;getEdgeBetween&quot;">​</a></h2><p>Returns the (first) edge between the specified endpoints.</p><h3 id="parameters-27" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-27" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>sourceId</code> {string} The source id.</li><li><code>targetId</code> {string} The target id.</li></ul><p>Returns <strong>Promise&lt;Array&lt;any&gt;&gt;</strong></p><h2 id="getedgewithlabel" tabindex="-1">getEdgeWithLabel <a class="header-anchor" href="#getedgewithlabel" aria-label="Permalink to &quot;getEdgeWithLabel&quot;">​</a></h2><p>Returns the edge between the given endpoints and the specified label.</p><h3 id="parameters-28" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-28" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>sourceId</code> {string} The source id.</li><li><code>targetId</code> {string} The target id.</li><li><code>label</code> {string} The label.</li></ul><p>Returns <strong>Promise&lt;any&gt;</strong></p><h2 id="getedgeswithlabel" tabindex="-1">getEdgesWithLabel <a class="header-anchor" href="#getedgeswithlabel" aria-label="Permalink to &quot;getEdgesWithLabel&quot;">​</a></h2><p>Returns the edges with the specific label.</p><h3 id="parameters-29" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-29" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>label</code> {string} A label.</li><li><code>amount</code> {number} The maximum amount to return. (optional, default <code>1000</code>)</li></ul><p>Returns <strong>Promise&lt;Array&lt;any&gt;&gt;</strong></p><h2 id="getedges" tabindex="-1">getEdges <a class="header-anchor" href="#getedges" aria-label="Permalink to &quot;getEdges&quot;">​</a></h2><p>Returns the edges satisfying the given predicate.</p><h3 id="parameters-30" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-30" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>predicate</code> {function|*} A Mongo-like projection. If the adapter supports it, a function can be passed.</li><li><code>amount</code> {number} The maximum amount to return. (optional, default <code>1000</code>)</li></ul><p>Returns <strong>Promise&lt;Array&lt;any&gt;&gt;</strong></p><h2 id="getdownstreamedges" tabindex="-1">getDownstreamEdges <a class="header-anchor" href="#getdownstreamedges" aria-label="Permalink to &quot;getDownstreamEdges&quot;">​</a></h2><p>This is a utility method to fetch the edges to the children of the specified node. This method should typically not be overridden by adapter implementations.</p><h3 id="parameters-31" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-31" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>sourceId</code> {string} The source id.</li><li><code>amount</code> {number} The maximum amount to return. (optional, default <code>1000</code>)</li></ul><p>Returns <strong>Promise&lt;any&gt;</strong></p><h2 id="getedgelabels" tabindex="-1">getEdgeLabels <a class="header-anchor" href="#getedgelabels" aria-label="Permalink to &quot;getEdgeLabels&quot;">​</a></h2><p>Fetches all the labels across all edges.</p><p>Returns <strong>Promise&lt;any&gt;</strong></p>`,222),n=[l];function h(r,o,d,p,k,c){return e(),s("div",null,n)}const E=a(t,[["render",h]]);export{u as __pageData,E as default};
