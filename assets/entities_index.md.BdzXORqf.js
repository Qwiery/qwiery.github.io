import{_ as e,c as s,o as i,V as a}from"./chunks/framework.Ca-bdDpS.js";const m=JSON.parse('{"title":"Entities","description":"","frontmatter":{},"headers":[],"relativePath":"entities/index.md","filePath":"entities/index.md"}'),t={name:"entities/index.md"},n=a(`<h1 id="entities" tabindex="-1">Entities <a class="header-anchor" href="#entities" aria-label="Permalink to &quot;Entities&quot;">â€‹</a></h1><p>This npm package contains the (data) entities used across Qwiery. In particular, the message-passing mechanism of <a href="/dashboards/">Qwiery Dashboards</a> uses these entities to communicate.</p><p>The package can be found <a href="https://www.npmjs.com/package/@orbifold/entities" target="_blank" rel="noreferrer">here</a> and installed via</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install @orbifold/entities</span></span></code></pre></div><p>The GitHub repo is <a href="https://github.com/Qwiery/qwiery-entities" target="_blank" rel="noreferrer">here</a>.</p><p>Using these entities is straightforward and their power reside in the fact that they are used for drag-drop, for rendering, for communication and for storage. They are the backbone of Qwiery. The crucial property is the <code>typeName</code> defining the serialization type:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ms</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MessageFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromAny</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    typeName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MarkdownMessage&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>The <code>NotebookCell</code> is a special entity related to the rendering system and is used for terminal rendering, dashboards and literate programming.</p>`,8),r=[n];function p(h,l,o,d,c,k){return i(),s("div",null,r)}const y=e(t,[["render",p]]);export{m as __pageData,y as default};
